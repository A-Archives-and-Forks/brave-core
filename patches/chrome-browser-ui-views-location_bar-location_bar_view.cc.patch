diff --git a/chrome/browser/ui/views/location_bar/location_bar_view.cc b/chrome/browser/ui/views/location_bar/location_bar_view.cc
index 9ecaad1fa8257dd331640dc30f89b9434a527915..73e8d2846b88f58403ecc4bfb914d2e6afe6c2ce 100644
--- a/chrome/browser/ui/views/location_bar/location_bar_view.cc
+++ b/chrome/browser/ui/views/location_bar/location_bar_view.cc
@@ -361,8 +361,9 @@ void LocationBarView::Init() {
     }
 
     params.types_enabled.push_back(PageActionIconType::kClickToCall);
-    if (base::FeatureList::IsEnabled(kWebOTPCrossDevice))
+    if (base::FeatureList::IsEnabled(kWebOTPCrossDevice)) {
       params.types_enabled.push_back(PageActionIconType::kSmsRemoteFetcher);
+    }
     params.types_enabled.push_back(PageActionIconType::kManagePasswords);
     if (!apps::features::ShouldShowLinkCapturingUX()) {
       params.types_enabled.push_back(PageActionIconType::kIntentPicker);
@@ -399,8 +400,9 @@ void LocationBarView::Init() {
       params.types_enabled.push_back(PageActionIconType::kSharingHub);
     }
   }
-  if (browser_ && !is_popup_mode_)
+  if (browser_ && !is_popup_mode_) {
     params.types_enabled.push_back(PageActionIconType::kBookmarkStar);
+  }
 
   params.icon_color = color_provider->GetColor(kColorPageActionIcon);
   params.between_icon_spacing = 8;
@@ -469,8 +471,9 @@ gfx::Point LocationBarView::GetOmniboxViewOrigin() const {
 
 void LocationBarView::SetImePrefixAutocompletion(const std::u16string& text) {
   DCHECK(OmniboxPrefixRichAutocompletionEnabled() || text.empty());
-  if (OmniboxPrefixRichAutocompletionEnabled())
+  if (OmniboxPrefixRichAutocompletionEnabled()) {
     SetOmniboxAdjacentText(ime_prefix_autocomplete_view_, text);
+  }
 }
 
 std::u16string LocationBarView::GetImePrefixAutocompletion() const {
@@ -489,8 +492,9 @@ std::u16string LocationBarView::GetImeInlineAutocompletion() const {
 
 void LocationBarView::SetOmniboxAdditionalText(const std::u16string& text) {
   DCHECK(OmniboxFieldTrial::IsRichAutocompletionEnabled() || text.empty());
-  if (!OmniboxFieldTrial::RichAutocompletionShowAdditionalText())
+  if (!OmniboxFieldTrial::RichAutocompletionShowAdditionalText()) {
     return;
+  }
 
   std::u16string adjusted_text;
   if (!text.empty()) {
@@ -514,8 +518,9 @@ std::u16string LocationBarView::GetOmniboxAdditionalText() const {
 
 void LocationBarView::SetOmniboxAdjacentText(views::Label* label,
                                              const std::u16string& text) {
-  if (text == label->GetText())
+  if (text == label->GetText()) {
     return;
+  }
   label->SetText(text);
   label->SetVisible(!text.empty());
   OnPropertyChanged(&label, views::kPropertyEffectsLayout);
@@ -595,8 +600,9 @@ void LocationBarView::GetAccessibleNodeData(ui::AXNodeData* node_data) {
 
 gfx::Size LocationBarView::GetMinimumSize() const {
   const int height = GetLayoutConstant(LOCATION_BAR_HEIGHT);
-  if (!IsInitialized())
+  if (!IsInitialized()) {
     return gfx::Size(0, height);
+  }
 
   const int inset_width = GetInsets().width();
   const int padding = GetLayoutConstant(LOCATION_BAR_ELEMENT_PADDING);
@@ -620,8 +626,9 @@ gfx::Size LocationBarView::GetMinimumSize() const {
 gfx::Size LocationBarView::CalculatePreferredSize(
     const views::SizeBounds& available_size) const {
   const int height = GetLayoutConstant(LOCATION_BAR_HEIGHT);
-  if (!IsInitialized())
+  if (!IsInitialized()) {
     return gfx::Size(0, height);
+  }
 
   const int inset_width = GetInsets().width();
   const int padding = GetLayoutConstant(LOCATION_BAR_ELEMENT_PADDING);
@@ -639,10 +646,12 @@ gfx::Size LocationBarView::CalculatePreferredSize(
   // how much visual clutter users are experiencing on a regular basis,
   // especially as we add more indicators to the bar.
   int width = inset_width + omnibox_width;
-  if (leading_width > 0)
+  if (leading_width > 0) {
     width += leading_width + padding;
-  if (trailing_width > 0)
+  }
+  if (trailing_width > 0) {
     width += trailing_width + padding;
+  }
 
   return gfx::Size(width, height);
 }
@@ -653,8 +662,9 @@ void LocationBarView::OnKeywordFaviconFetched(const gfx::Image& icon) {
 }
 
 void LocationBarView::Layout(PassKey) {
-  if (!IsInitialized())
+  if (!IsInitialized()) {
     return;
+  }
 
   selected_keyword_view_->SetVisible(false);
 
@@ -724,8 +734,9 @@ void LocationBarView::Layout(PassKey) {
     icon_left += icon_keyword_indent;
     text_left += text_keyword_indent;
   }
-  if (show_overriding_permission_chip)
+  if (show_overriding_permission_chip) {
     text_left += text_overriding_permission_chip_indent;
+  }
 
   LocationBarLayout leading_decorations(LocationBarLayout::Position::kLeftEdge,
                                         text_left);
@@ -747,6 +758,7 @@ void LocationBarView::Layout(PassKey) {
   // label/chip.
   const double kLeadingDecorationMaxFraction = 0.5;
 
+  BRAVE_LAYOUT_LEADING_DECORATIONS
   if (show_overriding_permission_chip) {
     if (base::FeatureList::IsEnabled(
             content_settings::features::kLeftHandSideActivityIndicators)) {
@@ -802,6 +814,7 @@ void LocationBarView::Layout(PassKey) {
     }
   };
 
+  BRAVE_LAYOUT_TRAILING_DECORATIONS
   add_trailing_decoration(page_action_icon_container_,
                           /*intra_item_padding=*/0);
   for (ContentSettingImageView* view : base::Reversed(content_setting_views_)) {
@@ -872,8 +885,9 @@ void LocationBarView::Layout(PassKey) {
     };
     // A helper to request from `reserve_width()` the width needed for `label`.
     const auto reserve_label_width = [&](views::Label* label) {
-      if (!label || !label->GetVisible())
+      if (!label || !label->GetVisible()) {
         return 0;
+      }
       int text_width =
           gfx::GetStringWidth(label->GetText(), label->font_list());
       return reserve_width(text_width + label->GetInsets().width());
@@ -892,8 +906,9 @@ void LocationBarView::Layout(PassKey) {
     // `view`.
     int current_x = location_bounds.x();
     const auto position_view = [&](views::View* view, int width) {
-      if (!view || !view->GetVisible())
+      if (!view || !view->GetVisible()) {
         return;
+      }
       view->SetBounds(current_x, location_bounds.y(), width,
                       location_bounds.height());
       current_x = view->bounds().right();
@@ -913,8 +928,9 @@ void LocationBarView::OnThemeChanged() {
   views::View::OnThemeChanged();
   // ToolbarView::Init() adds |this| to the view hierarchy before initializing,
   // which will trigger an early theme change.
-  if (!IsInitialized())
+  if (!IsInitialized()) {
     return;
+  }
 
   const SkColor icon_color = GetColorProvider()->GetColor(kColorPageActionIcon);
   page_action_icon_controller_->SetIconColor(icon_color);
@@ -932,8 +948,9 @@ void LocationBarView::ChildPreferredSizeChanged(views::View* child) {
 }
 
 void LocationBarView::Update(WebContents* contents) {
-  if (contents)
+  if (contents) {
     page_action_icon_controller_->UpdateWebContents(contents);
+  }
 
   RefreshContentSettingViews();
 
@@ -941,13 +958,15 @@ void LocationBarView::Update(WebContents* contents) {
   location_icon_view_->Update(/*suppress_animations=*/contents,
                               omnibox_view_->model()->PopupIsOpen());
 
-  if (intent_chip_)
+  if (intent_chip_) {
     intent_chip_->Update();
+  }
 
-  if (contents)
+  if (contents) {
     omnibox_view_->OnTabChanged(contents);
-  else
+  } else {
     omnibox_view_->Update();
+  }
 
   OnChanged();  // NOTE: Triggers layout.
 
@@ -956,8 +975,9 @@ void LocationBarView::Update(WebContents* contents) {
   if (contents && !IsEditingOrEmpty()) {
     auto* permission_request_manager =
         permissions::PermissionRequestManager::FromWebContents(contents);
-    if (permission_request_manager->CanRestorePrompt())
+    if (permission_request_manager->CanRestorePrompt()) {
       permission_request_manager->RestorePrompt();
+    }
   }
 }
 
@@ -1036,13 +1056,15 @@ WebContents* LocationBarView::GetWebContentsForPageActionIconView() {
 }
 
 bool LocationBarView::ShouldHidePageActionIcons() const {
-  if (!omnibox_view_)
+  if (!omnibox_view_) {
     return false;
+  }
 
   // When the user is typing in the omnibox, the page action icons are no longer
   // associated with the current omnibox text, so hide them.
-  if (omnibox_view_->model()->user_input_in_progress())
+  if (omnibox_view_->model()->user_input_in_progress()) {
     return true;
+  }
 
   // Also hide them if the popup is open for any other reason, e.g. ZeroSuggest.
   // The page action icons are not relevant to the displayed suggestions.
@@ -1075,11 +1097,13 @@ int LocationBarView::GetAvailableDecorationTextHeight() {
 
 int LocationBarView::GetMinimumLeadingWidth() const {
   // If the keyword bubble is showing, the view can collapse completely.
-  if (ShouldShowKeywordBubble())
+  if (ShouldShowKeywordBubble()) {
     return 0;
+  }
 
-  if (location_icon_view_->GetShowText())
+  if (location_icon_view_->GetShowText()) {
     return location_icon_view_->GetMinimumLabelTextWidth();
+  }
 
   return GetLayoutConstant(LOCATION_BAR_ELEMENT_PADDING) +
          location_icon_view_->GetMinimumSize().width();
@@ -1243,8 +1267,9 @@ void LocationBarView::OnPageInfoBubbleClosed(
   // else), we should refocus the location bar. This lets the user tab into the
   // "You should reload this page" infobar rather than dumping them back out
   // into a stale webpage.
-  if (!reload_prompt)
+  if (!reload_prompt) {
     return;
+  }
   if (closed_reason != views::Widget::ClosedReason::kEscKeyPressed &&
       closed_reason != views::Widget::ClosedReason::kCloseButtonClicked) {
     return;
@@ -1282,12 +1307,14 @@ LocationBarTesting* LocationBarView::GetLocationBarForTesting() {
 }
 
 bool LocationBarView::TestContentSettingImagePressed(size_t index) {
-  if (index >= content_setting_views_.size())
+  if (index >= content_setting_views_.size()) {
     return false;
+  }
 
   views::View* image_view = content_setting_views_[index];
-  if (!image_view->GetVisible())
+  if (!image_view->GetVisible()) {
     return false;
+  }
 
   image_view->OnKeyPressed(
       ui::KeyEvent(ui::ET_KEY_PRESSED, ui::VKEY_SPACE, ui::EF_NONE));
@@ -1311,8 +1338,9 @@ bool LocationBarView::GetNeedsNotificationWhenVisibleBoundsChange() const {
 
 void LocationBarView::OnVisibleBoundsChanged() {
   OmniboxPopupView* popup = GetOmniboxPopupView();
-  if (popup->IsOpen())
+  if (popup->IsOpen()) {
     popup->UpdatePopupAppearance();
+  }
 }
 
 void LocationBarView::OnFocus() {
@@ -1322,8 +1350,9 @@ void LocationBarView::OnFocus() {
 }
 
 void LocationBarView::OnPaintBorder(gfx::Canvas* canvas) {
-  if (!is_popup_mode_)
+  if (!is_popup_mode_) {
     return;  // The border is painted by our Background.
+  }
 
   gfx::Rect bounds(GetContentsBounds());
   const SkColor border_color =
@@ -1436,8 +1465,9 @@ void LocationBarView::OnPopupVisibilityChanged() {
   UpdateWithoutTabRestore();
 
   // The focus ring may be hidden or shown when the popup visibility changes.
-  if (views::FocusRing::Get(this))
+  if (views::FocusRing::Get(this)) {
     views::FocusRing::Get(this)->SchedulePaint();
+  }
 
   // We indent the textfield when the popup is open to align to suggestions.
   omnibox_view_->NotifyAccessibilityEvent(ax::mojom::Event::kControlsChanged,
@@ -1449,8 +1479,9 @@ const LocationBarModel* LocationBarView::GetLocationBarModel() const {
 }
 
 void LocationBarView::OnOmniboxFocused() {
-  if (views::FocusRing::Get(this))
+  if (views::FocusRing::Get(this)) {
     views::FocusRing::Get(this)->SchedulePaint();
+  }
 
   // Only show hover animation in unfocused steady state.  Since focusing
   // the omnibox is intentional, snapping is better than transitioning here.
@@ -1459,16 +1490,18 @@ void LocationBarView::OnOmniboxFocused() {
 }
 
 void LocationBarView::OnOmniboxBlurred() {
-  if (views::FocusRing::Get(this))
+  if (views::FocusRing::Get(this)) {
     views::FocusRing::Get(this)->SchedulePaint();
+  }
   RefreshBackground();
 }
 
 void LocationBarView::OnOmniboxHovered(bool is_hovering) {
   if (is_hovering) {
     // Only show the hover animation when omnibox is in unfocused steady state.
-    if (!omnibox_view_->HasFocus())
+    if (!omnibox_view_->HasFocus()) {
       hover_animation_.Show();
+    }
   } else {
     hover_animation_.Hide();
   }
@@ -1479,14 +1512,17 @@ void LocationBarView::OnTouchUiChanged() {
       CONTEXT_OMNIBOX_PRIMARY, views::style::STYLE_PRIMARY);
   location_icon_view_->SetFontList(font_list);
   omnibox_view_->SetFontList(font_list);
-  if (OmniboxPrefixRichAutocompletionEnabled())
+  if (OmniboxPrefixRichAutocompletionEnabled()) {
     ime_prefix_autocomplete_view_->SetFontList(font_list);
+  }
   ime_inline_autocomplete_view_->SetFontList(font_list);
-  if (OmniboxFieldTrial::RichAutocompletionShowAdditionalText())
+  if (OmniboxFieldTrial::RichAutocompletionShowAdditionalText()) {
     omnibox_additional_text_view_->SetFontList(font_list);
+  }
   selected_keyword_view_->SetFontList(font_list);
-  for (ContentSettingImageView* view : content_setting_views_)
+  for (ContentSettingImageView* view : content_setting_views_) {
     view->SetFontList(font_list);
+  }
   page_action_icon_controller_->SetFontList(font_list);
   location_icon_view_->Update(/*suppress_animations=*/false,
                               omnibox_view_->model()->PopupIsOpen());
@@ -1541,12 +1577,14 @@ SkColor LocationBarView::GetSecurityChipColor(
 
 bool LocationBarView::ShowPageInfoDialog() {
   WebContents* contents = GetWebContents();
-  if (!contents)
+  if (!contents) {
     return false;
+  }
 
   content::NavigationEntry* entry = contents->GetController().GetVisibleEntry();
-  if (entry->IsInitialEntry())
+  if (entry->IsInitialEntry()) {
     return false;
+  }
 
   DCHECK(GetWidget());
 
@@ -1595,10 +1633,10 @@ void LocationBarView::RecordPageInfoMetrics() {
 ui::ImageModel LocationBarView::GetLocationIcon(
     LocationIconView::Delegate::IconFetchedCallback on_icon_fetched) const {
   bool dark_mode = false;
-    if (location_icon_view_ && location_icon_view_->GetBackground()) {
-      dark_mode = color_utils::IsDark(
-          location_icon_view_->GetBackground()->get_color());
-    }
+  if (location_icon_view_ && location_icon_view_->GetBackground()) {
+    dark_mode =
+        color_utils::IsDark(location_icon_view_->GetBackground()->get_color());
+  }
 
   return omnibox_view_
              ? omnibox_view_->GetIcon(
