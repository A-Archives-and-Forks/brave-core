diff --git a/components/sync/base/model_type.cc b/components/sync/base/model_type.cc
index 2a7742feedd38e6e68b09fb1b4bbf0aebd856c76..ab7bdb3228739c90b90f8ab6c80505724dfcf702 100644
--- a/components/sync/base/model_type.cc
+++ b/components/sync/base/model_type.cc
@@ -196,6 +196,9 @@ const ModelTypeInfo kModelTypeInfoMap[] = {
      "Outgoing Password Sharing Invitations",
      sync_pb::EntitySpecifics::kOutgoingPasswordSharingInvitationFieldNumber,
      ModelTypeForHistograms::kOutgoingPasswordSharingInvitations},
+    {PLAYLIST, "PLAYLIST", "playlist", "Playlist",
+     sync_pb::EntitySpecifics::kPlaylistFieldNumber,
+     ModelTypeForHistograms::kOutgoingPasswordSharingInvitations},
     // ---- Proxy types ----
     {PROXY_TABS, "", "", "Proxy tabs", -1, ModelTypeForHistograms::kProxyTabs},
     // ---- Control Types ----
@@ -207,7 +210,7 @@ const ModelTypeInfo kModelTypeInfoMap[] = {
 static_assert(std::size(kModelTypeInfoMap) == GetNumModelTypes(),
               "kModelTypeInfoMap should have GetNumModelTypes() elements");
 
-static_assert(48 == syncer::GetNumModelTypes(),
+static_assert(49 == syncer::GetNumModelTypes(),
               "When adding a new type, update enum SyncModelTypes in enums.xml "
               "and suffix SyncModelType in histograms.xml.");
 
@@ -285,6 +288,7 @@ constexpr kSpecificsFieldNumberToModelTypeMap
         {sync_pb::EntitySpecifics::
              kOutgoingPasswordSharingInvitationFieldNumber,
          OUTGOING_PASSWORD_SHARING_INVITATION},
+        {sync_pb::EntitySpecifics::kPlaylistFieldNumber, PLAYLIST},
         // ---- Control Types ----
         {sync_pb::EntitySpecifics::kNigoriFieldNumber, NIGORI},
     });
@@ -439,6 +443,9 @@ void AddDefaultFieldValue(ModelType type, sync_pb::EntitySpecifics* specifics) {
     case OUTGOING_PASSWORD_SHARING_INVITATION:
       specifics->mutable_outgoing_password_sharing_invitation();
       break;
+    case PLAYLIST:
+      specifics->playlist();
+      break;
   }
 }
 
@@ -467,7 +474,7 @@ void internal::GetModelTypeSetFromSpecificsFieldNumberListHelper(
 }
 
 ModelType GetModelTypeFromSpecifics(const sync_pb::EntitySpecifics& specifics) {
-  static_assert(48 == syncer::GetNumModelTypes(),
+  static_assert(49 == syncer::GetNumModelTypes(),
                 "When adding new protocol types, the following type lookup "
                 "logic must be updated.");
   if (specifics.has_bookmark())
@@ -566,6 +573,9 @@ ModelType GetModelTypeFromSpecifics(const sync_pb::EntitySpecifics& specifics) {
   if (specifics.has_autofill_wallet_credential()) {
     return AUTOFILL_WALLET_CREDENTIAL;
   }
+  if (specifics.has_playlist()) {
+    return PLAYLIST;
+  }
 
   // This client version doesn't understand |specifics|.
   DVLOG(1) << "Unknown datatype in sync proto.";
@@ -573,7 +583,7 @@ ModelType GetModelTypeFromSpecifics(const sync_pb::EntitySpecifics& specifics) {
 }
 
 ModelTypeSet EncryptableUserTypes() {
-  static_assert(48 == syncer::GetNumModelTypes(),
+  static_assert(49 == syncer::GetNumModelTypes(),
                 "If adding an unencryptable type, remove from "
                 "encryptable_user_types below.");
   ModelTypeSet encryptable_user_types = UserTypes();
