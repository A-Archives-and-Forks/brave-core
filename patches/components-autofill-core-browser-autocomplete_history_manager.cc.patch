diff --git a/components/autofill/core/browser/autocomplete_history_manager.cc b/components/autofill/core/browser/autocomplete_history_manager.cc
index d0a9e5195744f89758c3a9b4c341e6a30e0b23ee..5b423284d1f4ca2d0d451fe8548f0a953c673135 100644
--- a/components/autofill/core/browser/autocomplete_history_manager.cc
+++ b/components/autofill/core/browser/autocomplete_history_manager.cc
@@ -118,8 +118,8 @@ bool AutocompleteHistoryManager::OnGetSingleFieldSuggestions(
 
 void AutocompleteHistoryManager::OnWillSubmitFormWithFields(
     const std::vector<FormFieldData>& fields,
-    bool is_autocomplete_enabled) {
-  if (!is_autocomplete_enabled || is_off_the_record_) {
+    const AutofillClient& client) {
+  if (!client.IsAutocompleteEnabled() || is_off_the_record_) {
     Notify(NotificationType::AutocompleteFormSkipped);
     return;
   }
@@ -130,9 +130,16 @@ void AutocompleteHistoryManager::OnWillSubmitFormWithFields(
       autocomplete_saveable_fields.push_back(field);
     }
   }
-  if (!autocomplete_saveable_fields.empty() && profile_database_.get()) {
-    profile_database_->AddFormFields(autocomplete_saveable_fields);
-    Notify(NotificationType::AutocompleteFormSubmitted);
+  if (!autocomplete_saveable_fields.empty()) {
+    auto callback =
+        base::BindOnce(&AutocompleteHistoryManager::OnConfirmAutocomplete,
+                       weak_ptr_factory_.GetWeakPtr(),
+                       std::move(autocomplete_saveable_fields));
+    if (!pref_service_->HasPrefPath("brave.autocomplete")) {
+      return client.ConfirmAutocomplete(std::move(callback));
+    }
+
+    std::move(callback).Run(pref_service_->GetBoolean("brave.autocomplete"));
   }
 }
 
@@ -314,6 +321,16 @@ void AutocompleteHistoryManager::OnAutofillCleanupReturned(
   Notify(NotificationType::AutocompleteCleanupDone);
 }
 
+void AutocompleteHistoryManager::OnConfirmAutocomplete(
+    std::vector<FormFieldData> autocomplete_saveable_fields,
+    bool user_decision) {
+  pref_service_->SetBoolean("brave.autocomplete", user_decision);
+  if (user_decision && profile_database_) {
+    profile_database_->AddFormFields(autocomplete_saveable_fields);
+    Notify(NotificationType::AutocompleteFormSubmitted);  // maybe fire earlier?
+  }
+}
+
 // We put the following restriction on stored FormFields:
 //  - non-empty name
 //  - non-empty nor whitespace only value
