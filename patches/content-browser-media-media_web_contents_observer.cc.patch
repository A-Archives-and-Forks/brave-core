diff --git a/content/browser/media/media_web_contents_observer.cc b/content/browser/media/media_web_contents_observer.cc
index 8800516e7f5c65be740445cb1d324b49b029c798..fe8a571ab8c7c241b09fa304b2a41b041ebb1a21 100644
--- a/content/browser/media/media_web_contents_observer.cc
+++ b/content/browser/media/media_web_contents_observer.cc
@@ -11,6 +11,7 @@
 #include "base/debug/dump_without_crashing.h"
 #include "base/functional/bind.h"
 #include "base/memory/raw_ptr.h"
+#include "base/ranges/algorithm.h"
 #include "base/task/sequenced_task_runner.h"
 #include "build/build_config.h"
 #include "content/browser/media/audible_metrics.h"
@@ -27,6 +28,7 @@
 #include "third_party/blink/public/common/mediastream/media_devices.h"
 #include "third_party/blink/public/platform/web_fullscreen_video_status.h"
 #include "ui/gfx/geometry/size.h"
+#include "url/gurl.h"
 
 namespace content {
 
@@ -577,6 +579,30 @@ void MediaWebContentsObserver::MediaPlayerObserverHostImpl::
       ->OnVideoVisibilityChanged(media_player_id_, meets_visibility_threshold);
 }
 
+void MediaWebContentsObserver::MediaPlayerObserverHostImpl::OnMediaLoaded(
+    const GURL& url,
+    bool is_media_source,
+    double duration) {
+  url_ = url;
+  is_media_source_ = is_media_source;
+  duration_ = duration;
+}
+
+const GURL& MediaWebContentsObserver::MediaPlayerObserverHostImpl::GetUrl()
+    const {
+  return url_;
+}
+
+bool MediaWebContentsObserver::MediaPlayerObserverHostImpl::GetIsMediaSource()
+    const {
+  return is_media_source_;
+}
+
+double MediaWebContentsObserver::MediaPlayerObserverHostImpl::GetDuration()
+    const {
+  return duration_;
+}
+
 bool MediaWebContentsObserver::IsMediaPlayerRemoteAvailable(
     const MediaPlayerId& player_id) {
   return media_player_remotes_.contains(player_id);
@@ -681,6 +707,23 @@ void MediaWebContentsObserver::SuspendAllMediaPlayers() {
   }
 }
 
+base::flat_map<MediaPlayerId, std::tuple<GURL, bool, double>>
+MediaWebContentsObserver::GetMediaMetadataByMediaPlayerIds() const {
+  decltype(GetMediaMetadataByMediaPlayerIds()) metadata;
+
+  base::ranges::transform(
+      media_player_observer_hosts_, std::inserter(metadata, metadata.end()),
+      [](const auto& pair) {
+        const auto& [media_player_id, observer_host] = pair;
+        return std::pair{media_player_id,
+                         std::tuple{observer_host->GetUrl(),
+                                    observer_host->GetIsMediaSource(),
+                                    observer_host->GetDuration()}};
+      });
+
+  return metadata;
+}
+
 void MediaWebContentsObserver::OnExperimentStateChanged(MediaPlayerId id,
                                                         bool is_starting) {
   use_after_free_checker_.check();
